#ifndef BPTREECHILDNODE_H
#define BPTREECHILDNODE_H

#include <BPTreeNode.h>
#include <vector>
#include "BPTreeChildNodeItem.h"
class BPTreeChildNode : public BPTreeNode
{
    public:
        BPTreeChildNode();
        virtual ~BPTreeChildNode();

        BPTreeChildNode(uint64_t nodeIndex);

        uint64_t getNodeIndex() { return nodeIndex_; };
        void setNodeIndex(uint64_t val) { nodeIndex_ = val; };

        bool isLeafNode(){return isLeafNode_;};

        bool insertItem(BPTreeNodeItem* item);
        bool deleteItem(uint32_t index);
        BPTreeNodeItem* getItem(uint32_t index);

        std::string getLowestChromKey();
        std::string getHighestChromKey();
        uint32_t getLowestChromID();
        uint32_t getHighestChromID();

          std::vector<BPTreeChildNodeItem*> getChildItems();

    protected:
    private:

        bool isLeafNode_;

 String lowestChromKey;     // lowest chromosome/contig key name
    String highestChromKey;         // highest chromosome/contig key name
    int lowestChromID;         // lowest chromosome ID corresponds to lowest key
    int highestChromID;

        uint64_t nodeIndex_;
        uint32_t lowestChromID_;
        uint32_t highestChromID_;
        std::string highestChromKey_;
        std::string lowestChromKey_;
        std::vector<BPTreeChildNodeItem *> childItems_;
};

#endif // BPTREECHILDNODE_H
